#!/usr/bin/python3

import datetime
import hashlib
import logging
import os
import sys
import smtplib
import ssl
import subprocess
from systemd.journal import JournalHandler
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from pathlib import Path

logging.basicConfig(filename='/var/log/motion/motion.log',
                    filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.DEBUG)

log = logging.getLogger('Motionmail')
log.addHandler(JournalHandler())

if __name__ == "__main__":
    filepath = Path(sys.argv[1])
    filename = filepath.name
    log.info(filepath.absolute().as_posix() + " is to be sent at " + str(datetime.datetime.now(datetime.timezone.utc)))
    sha256 = hashlib.sha256()
    with filepath.open('rb') as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload((attachment).read())
        attachment.seek(0)
        while True:
            data = attachment.read(65535)
            if not data:
                break
            sha256.update(data)
    checksum = sha256.hexdigest()
    encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        f"attachment; filename= {filename}",
    )
    subject = "A new file has been generated by motioncore"
    body = f"<h2><style='color:red'>Motion detected!</style></h2><br><h3>Motion has been detected.<br>Sha256sum checksum of attachment is {checksum}</h3>"
    message = MIMEMultipart()
    message['Subject'] = subject
    message['From'] = "{{ motion_sender_email_address}}"
    message['To'] = "{{ motion_receiver_email_address }}"
    html_part = MIMEText(body, 'html')
    message.attach(html_part)
    message.attach(part)

    tunip = subprocess.run(["/etc/motion/source.sh",''], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    address = tunip.stdout.decode('utf-8')
    address = address.strip()
    if "exist" in address:
        log.warn("motionmail failed - tun interface does not exist?")
        exit(1)
    sslcontext = ssl.create_default_context()
    server = smtplib.SMTP_SSL("smtp.gmail.com", "465", context=sslcontext, source_address=(address, 0))
    server.login("{{ motion_email_host_address }}", "{ os.getenv('MOTION_EMAIL_PASSWORD' )}")
    server.sendmail("{{ motion_email_host_address }}", "{{ motion_receiver_email_address }}", message.as_string())
    server.quit()
